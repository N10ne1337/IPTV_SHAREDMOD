# –ò–º—è —Ñ–∞–π–ª–∞: update_playlist.py
# –í–ï–†–°–ò–Ø 5.1 - –ñ–ï–õ–ï–ó–û–ë–ï–¢–û–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô

import requests
import re

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
UPSTREAM_URL = "https://raw.githubusercontent.com/IPTVSHARED/iptv/main/IPTV_SHARED.m3u"
LOCAL_FILE = "IPTV_SHARED.m3u"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def parse_playlist_content_bulletproof(content):
    channels = {}
    lines = content.splitlines()

    for i, line in enumerate(lines):
        line = line.strip()
        if line.startswith('#EXTINF'):
            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–º—è –∫–∞–Ω–∞–ª–∞
            name_match = re.search(r'tvg-name="(.*?)"', line)
            id_match = re.search(r'tvg-id="(.*?)"', line)
            raw_name = name_match.group(1) if name_match else None
            channel_id = id_match.group(1) if id_match else None

            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –±–µ—Ä–µ–º –∏–∑ —Å–∞–º–æ–π —Å—Ç—Ä–æ–∫–∏ EXTINF
            if not raw_name:
                raw_name_match = re.search(r'#EXTINF:-?\d+,(.*)', line)
                raw_name = raw_name_match.group(1).strip() if raw_name_match else None

            if not raw_name:
                continue  # –°–æ–≤—Å–µ–º –±–µ–∑ –∏–º–µ–Ω–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ id > name
            unique_key = channel_id if channel_id else raw_name

            # –ò—â–µ–º —Å—Å—ã–ª–∫—É
            for j in range(i + 1, min(i + 6, len(lines))):
                next_line = lines[j].strip()
                if next_line.startswith('http'):
                    full_channel_block = f"{line}\n{next_line}"
                    channels[unique_key] = full_channel_block
                    break

    return channels


def main():
    print(">>> –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (v5.1 - –ñ–µ–ª–µ–∑–æ–±–µ—Ç–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–æ—á–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π)...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    try:
        print(f"[*] –°–∫–∞—á–∏–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑: {UPSTREAM_URL}")
        response = requests.get(UPSTREAM_URL, timeout=60)
        response.raise_for_status()

        upstream_content = response.text
        upstream_channels = parse_playlist_content_bulletproof(upstream_content)

        upstream_count = len(upstream_channels)
        print(f"[+] –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {upstream_count} –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")

        if upstream_count < 1000:
            print(f"[!] –í–ù–ò–ú–ê–ù–ò–ï: –ú–∞–ª–æ–≤–∞—Ç–æ ({upstream_count}) –∫–∞–Ω–∞–ª–æ–≤. –ü—Ä–µ—Ä—ã–≤–∞—é.")
            exit(1)

    except requests.exceptions.RequestException as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        exit(1)

    # 2. –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    local_channels = {}
    try:
        print(f"[*] –ß–∏—Ç–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {LOCAL_FILE}")
        with open(LOCAL_FILE, 'r', encoding='utf-8') as f:
            local_content = f.read()
        local_channels = parse_playlist_content_bulletproof(local_content)
        print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(local_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
    except FileNotFoundError:
        print("[-] –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª.")

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    custom_channels_to_add = []
    print("[*] –ò—â—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
    for name, info in local_channels.items():
        if name not in upstream_channels:
            print(f"    -> –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª: '{name}'")
            custom_channels_to_add.append(info)

    # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º
    print("[*] –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç...")
    final_playlist_content = upstream_content.strip()

    if custom_channels_to_add:
        final_playlist_content += "\n\n" + "\n".join(custom_channels_to_add)
        print(f"[+] –î–æ–±–∞–≤–ª–µ–Ω–æ {len(custom_channels_to_add)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
    else:
        print("[-] –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        with open(LOCAL_FILE, 'w', encoding='utf-8') as f:
            f.write(final_playlist_content)
        print(f"[‚úì] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{LOCAL_FILE}'")
    except Exception as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        exit(1)

    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_count = len(parse_playlist_content_bulletproof(final_playlist_content))
    print(f"[üìä] –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:")
    print(f"      - –ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: {upstream_count}")
    print(f"      - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—à–∏—Ö: {len(custom_channels_to_add)}")
    print(f"      - –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {final_count}")


if __name__ == "__main__":
    main()
