# –ò–º—è —Ñ–∞–π–ª–∞: update_playlist.py
# –í–ï–†–°–ò–Ø 5.3 - –°–û–•–†–ê–ù–Ø–ï–¢ –í–°–ï –ö–ê–ù–ê–õ–´ (–Ω–∏–∫–æ–≥–æ –Ω–µ —É–¥–∞–ª—è–µ—Ç)

import requests
import re

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
UPSTREAM_URL = "https://raw.githubusercontent.com/IPTVSHARED/iptv/main/IPTV_SHARED.m3u"
LOCAL_FILE = "IPTV_SHARED.m3u"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def parse_playlist_content_bulletproof(content):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä M3U –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    channels = {}
    lines = content.splitlines()
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å #EXTINF
        if line.startswith('#EXTINF'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            name_match = re.search(r'tvg-name="([^"]*)"', line)
            id_match = re.search(r'tvg-id="([^"]*)"', line)
            
            raw_name = name_match.group(1) if name_match else None
            channel_id = id_match.group(1) if id_match else None
            
            # –ï—Å–ª–∏ –Ω–µ—Ç tvg-name, –±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if not raw_name:
                name_after_comma = re.search(r'#EXTINF:[^,]*,\s*(.+?)(?:\s*$)', line)
                if name_after_comma:
                    raw_name = name_after_comma.group(1).strip()
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not raw_name:
                i += 1
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
            unique_key = channel_id if channel_id else raw_name
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ #EXTINF –∏–ª–∏ URL
            channel_info_lines = [line]
            j = i + 1
            url_found = False
            
            # –ò—â–µ–º URL, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            while j < len(lines):
                next_line = lines[j].strip()
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π #EXTINF, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if next_line.startswith('#EXTINF'):
                    break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ URL
                if next_line and (next_line.startswith('http') or next_line.startswith('udp://') or 
                                next_line.startswith('rtmp://') or next_line.startswith('rtsp://')):
                    channel_info_lines.append(next_line)
                    url_found = True
                    break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ #EXT —Ç–µ–≥–∏ (–∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫)
                elif next_line.startswith('#EXT') and next_line:
                    channel_info_lines.append(next_line)
                
                j += 1
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ URL, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª
            if url_found:
                full_channel_block = '\n'.join(channel_info_lines)
                channels[unique_key] = full_channel_block
            
            i = j  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        else:
            i += 1
    
    return channels


def main():
    print(">>> –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (v5.3 - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–ï –∫–∞–Ω–∞–ª—ã)...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    try:
        print(f"[*] –°–∫–∞—á–∏–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑: {UPSTREAM_URL}")
        response = requests.get(UPSTREAM_URL, timeout=60)
        response.raise_for_status()

        upstream_content = response.text
        upstream_channels = parse_playlist_content_bulletproof(upstream_content)

        upstream_count = len(upstream_channels)
        print(f"[+] –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {upstream_count} –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")

        if upstream_count < 100:
            print(f"[!] –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ ({upstream_count}) –∫–∞–Ω–∞–ª–æ–≤.")
            channel_names = list(upstream_channels.keys())[:10]
            print(f"[DEBUG] –ü–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channel_names}")

    except requests.exceptions.RequestException as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        exit(1)

    # 2. –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    local_channels = {}
    try:
        print(f"[*] –ß–∏—Ç–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {LOCAL_FILE}")
        with open(LOCAL_FILE, 'r', encoding='utf-8') as f:
            local_content = f.read()
        local_channels = parse_playlist_content_bulletproof(local_content)
        print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(local_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
    except FileNotFoundError:
        print("[-] –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª.")

    # 3. –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞–Ω–∞–ª—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –í–°–ï
    print("[*] –û–±—ä–µ–¥–∏–Ω—è—é –∫–∞–Ω–∞–ª—ã (—Å–æ—Ö—Ä–∞–Ω—è—é –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)...")
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å—ë —á—Ç–æ –±—ã–ª–æ)
    merged_channels = local_channels.copy()
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    new_channels = []
    updated_channels = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–Ω–∞–ª—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    for name, info in upstream_channels.items():
        if name in merged_channels:
            # –ö–∞–Ω–∞–ª —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            if merged_channels[name] != info:
                print(f"    ‚Üª –û–±–Ω–æ–≤–ª—è—é –∫–∞–Ω–∞–ª: '{name}'")
                merged_channels[name] = info
                updated_channels.append(name)
        else:
            # –ù–æ–≤—ã–π –∫–∞–Ω–∞–ª - –¥–æ–±–∞–≤–ª—è–µ–º
            print(f"    + –î–æ–±–∞–≤–ª—è—é –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: '{name}'")
            merged_channels[name] = info
            new_channels.append(name)
    
    # –ö–∞–Ω–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ (–ù–ï —É–¥–∞–ª—è–µ–º –∏—Ö!)
    preserved_channels = []
    for name in local_channels:
        if name not in upstream_channels:
            preserved_channels.append(name)
    
    if preserved_channels:
        print(f"[*] –°–æ—Ö—Ä–∞–Ω—è—é {len(preserved_channels)} –∫–∞–Ω–∞–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ:")
        for name in preserved_channels[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"    ‚òë –°–æ—Ö—Ä–∞–Ω—ë–Ω: '{name}'")
        if len(preserved_channels) > 10:
            print(f"    ... –∏ –µ—â—ë {len(preserved_channels) - 10} –∫–∞–Ω–∞–ª–æ–≤")

    # 4. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç
    print("[*] –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç...")
    
    final_content_lines = ['#EXTM3U']
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    for channel_info in merged_channels.values():
        final_content_lines.append(channel_info)
    
    final_playlist_content = '\n\n'.join(final_content_lines)

    # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        with open(LOCAL_FILE, 'w', encoding='utf-8') as f:
            f.write(final_playlist_content)
        print(f"[‚úì] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{LOCAL_FILE}'")
    except Exception as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        exit(1)

    # 6. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_count = len(merged_channels)
    print(f"[üìä] –ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á—ë—Ç:")
    print(f"      - –ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: {upstream_count}")
    print(f"      - –ö–∞–Ω–∞–ª–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ –±—ã–ª–æ: {len(local_channels)}")
    print(f"      - –ù–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(new_channels)}")
    print(f"      - –ö–∞–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {len(updated_channels)}")
    print(f"      - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {len(preserved_channels)}")
    print(f"      - –ò–¢–û–ì–û –∫–∞–Ω–∞–ª–æ–≤ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ: {final_count}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    if new_channels or updated_channels:
        print(f"[üîÑ] –ü—Ä–æ–∏–∑–æ—à–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è: +{len(new_channels)} –Ω–æ–≤—ã—Ö, ~{len(updated_channels)} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    else:
        print(f"[‚ûñ] –ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")


if __name__ == "__main__":
    main()
