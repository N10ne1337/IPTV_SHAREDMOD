import requests
import re
import json
import time
from concurrent.futures import ThreadPoolExecutor, as_completed
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
SOURCE_URL = "https://gitlab.com/iptv135435/iptvshared/-/raw/main/IPTV_SHARED.m3u"
MY_PLAYLIST_FILE = "IPTV_SHARED.m3u"
SPECIAL_OPS_FILE = "channels_to_protect.json"
MAX_WORKERS = 10
URL_TIMEOUT = 10

# --- –õ–û–ì–ò–ö–ê ---

def parse_simple_playlist(text):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ URL –∏–∑ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞."""
    return set(re.findall(r'^(http.*)$', text, re.MULTILINE))

def scrape_m3u8_from_site(page_url, identifier):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —à–ø–∏–æ–Ω–∞-–Ω–µ–≤–∏–¥–∏–º–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è .m3u8 —Å—Å—ã–ª–∫–∏ —Å —Å–∞–π—Ç–∞."""
    print(f"üïµÔ∏è‚Äç‚ôÇÔ∏è [–®–ü–ò–û–ù] –í–Ω–µ–¥—Ä—è—é—Å—å –Ω–∞ {page_url}...")
    try:
        chrome_options = Options()
        chrome_options.add_argument("--headless")
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        
        caps = DesiredCapabilities.CHROME
        caps['goog:loggingPrefs'] = {'performance': 'ALL'}

        driver = webdriver.Chrome(options=chrome_options, desired_capabilities=caps)
        driver.get(page_url)
        time.sleep(15)  # –î–∞–µ–º –≤—Ä–µ–º—è –ø–ª–µ–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç

        logs = driver.get_log('performance')
        driver.quit()

        for entry in logs:
            log = json.loads(entry['message'])['message']
            if 'Network.requestWillBeSent' in log['method']:
                url = log['params']['request']['url']
                if '.m3u8' in url and identifier in url:
                    print(f"  ‚úÖ [–®–ü–ò–û–ù] –°–µ–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±—ã—Ç—ã: ...{url[-50:]}")
                    return url
        
        print(f"  ‚ùå [–®–ü–ò–û–ù] –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Å—ã–ª–∫—É —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º '{identifier}'.")
        return None
    except Exception as e:
        print(f"  üî• [–®–ü–ò–û–ù] –ú–∏—Å—Å–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞! –û—à–∏–±–∫–∞: {e}")
        return None

def check_url(url):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç URL –Ω–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å."""
    if not url: return None
    try:
        response = requests.head(url, timeout=URL_TIMEOUT, allow_redirects=True)
        if response.status_code == 200:
            print(f"  üëç –°—Å—ã–ª–∫–∞ –∂–∏–≤–∞: {url.split('/')[-1]}")
            return url
    except requests.RequestException:
        pass
    print(f"  üëé –°—Å—ã–ª–∫–∞ –º–µ—Ä—Ç–≤–∞: {url.split('/')[-1]}")
    return None

def main():
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ç–æ–∫–æ–ª '–¢–ï–†–ú–ò–ù–ê–¢–û–†'!")
    
    # –®–∞–≥ 1: –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —à–ø–∏–æ–Ω–æ–≤
    final_urls = {}
    try:
        with open(SPECIAL_OPS_FILE, 'r', encoding='utf-8') as f:
            special_channels = json.load(f).get("special_channels", [])
        
        for channel in special_channels:
            url = scrape_m3u8_from_site(channel["page_url"], channel["stream_identifier"])
            if url:
                final_urls[channel["name"]] = url
    except FileNotFoundError:
        print("‚ÑπÔ∏è –î–æ—Å—å–µ –Ω–∞ —Å–ø–µ—Ü–∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞—é —à–ø–∏–æ–Ω—Å–∫—É—é –º–∏—Å—Å–∏—é.")

    # –®–∞–≥ 2: –°–±–æ—Ä –ø–ª–µ–π–ª–∏—Å—Ç–∞ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_urls = set()
    try:
        response = requests.get(SOURCE_URL, timeout=20)
        if response.status_code == 200:
            source_urls = parse_simple_playlist(response.text)
        print(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω –ø—É–±–ª–∏—á–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç. –ù–∞–π–¥–µ–Ω–æ {len(source_urls)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç: {e}")

    # –®–∞–≥ 3: –¢–æ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    print(f"üî• –ü—Ä–æ–≤–µ—Ä—è—é {len(source_urls)} —Å—Å—ã–ª–æ–∫ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞...")
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        futures = [executor.submit(check_url, url) for url in source_urls]
        for future in as_completed(futures):
            result_url = future.result()
            if result_url:
                name = result_url.split('/')[-1].split('.')[0] or "–ö–∞–Ω–∞–ª"
                if name not in final_urls: # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –æ—Ç —à–ø–∏–æ–Ω–æ–≤
                    final_urls[name] = result_url
    
    # –®–∞–≥ 4: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞
    if not final_urls:
        print("üî¥ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –∫–∞–Ω–∞–ª–∞. –§–∞–π–ª –Ω–µ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–µ–Ω.")
        return

    print(f"\nüìù –°–æ–±–∏—Ä–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ {len(final_urls)} –∫–∞–Ω–∞–ª–æ–≤...")
    sorted_names = sorted(final_urls.keys())
    with open(MY_PLAYLIST_FILE, 'w', encoding='utf-8') as f:
        f.write("#EXTM3U\n")
        for name in sorted_names:
            url = final_urls[name]
            f.write(f"#EXTINF:-1,{name}\n")
            f.write(f"{url}\n")
            
    print("‚úÖ –ü—Ä–æ—Ç–æ–∫–æ–ª '–¢–ï–†–ú–ò–ù–ê–¢–û–†' –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    main()
