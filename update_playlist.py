# –ò–º—è —Ñ–∞–π–ª–∞: update_playlist.py
# –í–ï–†–°–ò–Ø 5.2 - –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ï–† M3U

import requests
import re

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
UPSTREAM_URL = "https://raw.githubusercontent.com/IPTVSHARED/iptv/main/IPTV_SHARED.m3u"
LOCAL_FILE = "IPTV_SHARED.m3u"
# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def parse_playlist_content_bulletproof(content):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä M3U –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤"""
    channels = {}
    lines = content.splitlines()
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫—É —Å #EXTINF
        if line.startswith('#EXTINF'):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            name_match = re.search(r'tvg-name="([^"]*)"', line)
            id_match = re.search(r'tvg-id="([^"]*)"', line)
            
            raw_name = name_match.group(1) if name_match else None
            channel_id = id_match.group(1) if id_match else None
            
            # –ï—Å–ª–∏ –Ω–µ—Ç tvg-name, –±–µ—Ä–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            if not raw_name:
                name_after_comma = re.search(r'#EXTINF:[^,]*,\s*(.+?)(?:\s*$)', line)
                if name_after_comma:
                    raw_name = name_after_comma.group(1).strip()
            
            # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –∏–º–µ–Ω–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if not raw_name:
                i += 1
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
            unique_key = channel_id if channel_id else raw_name
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ #EXTINF –∏–ª–∏ URL
            channel_info_lines = [line]
            j = i + 1
            url_found = False
            
            # –ò—â–µ–º URL, –ø—Ä–æ–ø—É—Å–∫–∞—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
            while j < len(lines):
                next_line = lines[j].strip()
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π #EXTINF, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è
                if next_line.startswith('#EXTINF'):
                    break
                
                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ URL
                if next_line and (next_line.startswith('http') or next_line.startswith('udp://') or 
                                next_line.startswith('rtmp://') or next_line.startswith('rtsp://')):
                    channel_info_lines.append(next_line)
                    url_found = True
                    break
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ #EXT —Ç–µ–≥–∏ (–∫—Ä–æ–º–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫)
                elif next_line.startswith('#EXT') and next_line:
                    channel_info_lines.append(next_line)
                
                j += 1
            
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ URL, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–Ω–∞–ª
            if url_found:
                full_channel_block = '\n'.join(channel_info_lines)
                channels[unique_key] = full_channel_block
            
            i = j  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        else:
            i += 1
    
    return channels


def main():
    print(">>> –ó–∞–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (v5.2 - –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è M3U)...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
    try:
        print(f"[*] –°–∫–∞—á–∏–≤–∞—é –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑: {UPSTREAM_URL}")
        response = requests.get(UPSTREAM_URL, timeout=60)
        response.raise_for_status()

        upstream_content = response.text
        upstream_channels = parse_playlist_content_bulletproof(upstream_content)

        upstream_count = len(upstream_channels)
        print(f"[+] –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {upstream_count} –∫–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")

        if upstream_count < 100:  # –°–Ω–∏–∑–∏–ª –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"[!] –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –º–∞–ª–æ ({upstream_count}) –∫–∞–Ω–∞–ª–æ–≤.")
            # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–∞–ª–æ–≤
            channel_names = list(upstream_channels.keys())[:10]
            print(f"[DEBUG] –ü–µ—Ä–≤—ã–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã: {channel_names}")
            
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            # exit(1)

    except requests.exceptions.RequestException as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
        exit(1)

    # 2. –ß–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    local_channels = {}
    try:
        print(f"[*] –ß–∏—Ç–∞—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {LOCAL_FILE}")
        with open(LOCAL_FILE, 'r', encoding='utf-8') as f:
            local_content = f.read()
        local_channels = parse_playlist_content_bulletproof(local_content)
        print(f"[+] –ù–∞–π–¥–µ–Ω–æ {len(local_channels)} –∫–∞–Ω–∞–ª–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –ø–ª–µ–π–ª–∏—Å—Ç–µ.")
    except FileNotFoundError:
        print("[-] –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª.")

    # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    custom_channels_to_add = []
    print("[*] –ò—â—É —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã...")
    for name, info in local_channels.items():
        if name not in upstream_channels:
            print(f"    -> –î–æ–±–∞–≤–ª—è—é –∫–∞–Ω–∞–ª: '{name}'")
            custom_channels_to_add.append(info)

    # 4. –û–±—ä–µ–¥–∏–Ω—è–µ–º
    print("[*] –§–æ—Ä–º–∏—Ä—É—é —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ M3U
    final_content_lines = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not upstream_content.strip().startswith('#EXTM3U'):
        final_content_lines.append('#EXTM3U')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    final_content_lines.append(upstream_content.strip())
    
    # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    if custom_channels_to_add:
        final_content_lines.extend(custom_channels_to_add)
        print(f"[+] –î–æ–±–∞–≤–ª–µ–Ω–æ {len(custom_channels_to_add)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")
    else:
        print("[-] –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    final_playlist_content = '\n\n'.join(final_content_lines)

    # 5. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    try:
        with open(LOCAL_FILE, 'w', encoding='utf-8') as f:
            f.write(final_playlist_content)
        print(f"[‚úì] –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ '{LOCAL_FILE}'")
    except Exception as e:
        print(f"[!!!] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏: {e}")
        exit(1)

    # 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    final_count = len(parse_playlist_content_bulletproof(final_playlist_content))
    print(f"[üìä] –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:")
    print(f"      - –ö–∞–Ω–∞–ª–æ–≤ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ: {upstream_count}")
    print(f"      - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—à–∏—Ö: {len(custom_channels_to_add)}")
    print(f"      - –ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤: {final_count}")


if __name__ == "__main__":
    main()
